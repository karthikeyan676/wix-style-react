:import {
    -st-from: "../../common/formatters.st";
    -st-named: applyUnit, color, fallback, font, value, applyOpacity;
}

:import {
    -st-from: "../../common/palette.st.css";
    -st-named: errorColor;
}

/*Defaults*/
:vars {
    DefaultColor: color-5;
    DefaultDisabledColor: color-3;
    DefaultErrorColor: value(errorColor);
    DefaultFont: "{theme: 'Body-M', size: '16px', lineHeight: '1.5em'}";
    DefaultXsmallFont: "{theme: 'Body-M', size: '12px', lineHeight: '1em'}";
    DefaultBackgroundColor: color-1;
    DefaultWidth: 104px;
    DefaultWidthXsmall: 80px;
}

/*Overrides*/
:vars {
    /*
        counter's font 
        @default Default "{theme: 'Body-M', size: '16px', lineHeight: '1.5em'}", Xsamll "{theme: 'Body-M', size: '12px', lineHeight: '1em'}"
    */
    MainFont: --overridable;
    /*
        The counter's background color
        @default color-1
    */
    MainBackgroundColor: --overridable;
    /*
        The counter's text and buttons color
        @default color-5
    */
    TextColor: --overridable;
    /*
        The counter's disabled color
        @default color-3
    */
    DisabledColor: --overridable;
    /*
        The counter's width
        @default Default size: 104px, XSmall size: 80px
    */
    MainWidth: --overridable;
}

:vars {
    counterColor: color(fallback(value(TextColor), value(DefaultColor)));
    counterBackgroundColor: color(fallback(value(MainBackgroundColor), value(DefaultBackgroundColor)));
    counterDisabledColor: color(fallback(value(DisabledColor), value(DefaultDisabledColor)));
    counterWidth: fallback(value(MainWidth), value(DefaultWidth));
    counterWidthXsmall: fallback(value(MainWidth), value(DefaultWidthXsmall));
    counterFont: fallback(font(value(MainFont)), font(value(DefaultFont)));
    counterXsmallFont: fallback(font(value(MainFont)), font(value(DefaultXsmallFont)));
}

.root {
    -st-states: error, disabled;
    display: inline-flex;
    flex-flow: row-reverse;
    justify-content: space-between;
    align-items: center;
    box-sizing: border-box;
    background: color(value(counterBackgroundColor));
    border-width: 1px;
    border-style: solid;
    border-color: applyOpacity(color(value(counterColor)), 0.6);
}

.root:focus-within,
.root:hover {
    border-color: applyOpacity(color(value(counterColor)), 1);
}

.root:not(.xsmall) {
    font: value(counterFont);
    width: value(counterWidth);
    height: calc((40 / 16) * 1em);
    padding: 0 6px;
}

.root.xsmall {
    font: value(counterXsmallFont);
    padding: 0 4px;
    width: value(counterWidthXsmall);
    height: calc((28 / 12) * 1em);
}
.root:error {
    border-color: value(DefaultErrorColor);
}

.root:disabled {
    border-color: color(value(counterDisabledColor));
}

.btn {
    background: none;
    padding: 6px;
    border: none;
    cursor: pointer;
}

.xsmall .btn {
    padding: 4px;
}

.btn path {
    fill: color(value(counterColor));
}

.btn[disabled] {
    cursor: default;
}

.btn[disabled] path {
    fill: color(value(counterDisabledColor));
}

.root:disabled .btn {
    color: color(value(counterDisabledColor));
}

.root:error svg {
    color: value(DefaultErrorColor);
}

.root .inputWrapper {
    flex: 1;
}

.root input {
    background: color(value(counterBackgroundColor));
    padding: 0;
    border: none;
    text-align: center;
    width: 100%;
    color: value(counterColor);
    font: inherit;
}

.xsmall svg {
    width: 0.5em;
    height: 0.5em;
    padding: 0;
    font: inherit;
}

.root:not(.xsmall) .error {
    padding: 5px 0 0;
}

.xsmall .error {
    width: 16px;
    height: 16px;
}

.root:disabled input {
    color: color(value(counterDisabledColor));
}

/* Removing browser-specific default buttons inside input element */
.root input::-webkit-outer-spin-button,
.root input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.root input[type=number] {
    -moz-appearance: textfield;
}

.root input::-ms-clear {
    display: none;
}